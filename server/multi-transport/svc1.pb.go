// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svc1.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestMsg struct {
	Num1                 int32    `protobuf:"varint,1,opt,name=num1,proto3" json:"num1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestMsg) Reset()         { *m = RequestMsg{} }
func (m *RequestMsg) String() string { return proto.CompactTextString(m) }
func (*RequestMsg) ProtoMessage()    {}
func (*RequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_827bd5fb3d7cbf70, []int{0}
}

func (m *RequestMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestMsg.Unmarshal(m, b)
}
func (m *RequestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestMsg.Marshal(b, m, deterministic)
}
func (m *RequestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMsg.Merge(m, src)
}
func (m *RequestMsg) XXX_Size() int {
	return xxx_messageInfo_RequestMsg.Size(m)
}
func (m *RequestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMsg proto.InternalMessageInfo

func (m *RequestMsg) GetNum1() int32 {
	if m != nil {
		return m.Num1
	}
	return 0
}

type ResponseMsg struct {
	Numres               int32    `protobuf:"varint,3,opt,name=numres,proto3" json:"numres,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseMsg) Reset()         { *m = ResponseMsg{} }
func (m *ResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ResponseMsg) ProtoMessage()    {}
func (*ResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_827bd5fb3d7cbf70, []int{1}
}

func (m *ResponseMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseMsg.Unmarshal(m, b)
}
func (m *ResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseMsg.Marshal(b, m, deterministic)
}
func (m *ResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMsg.Merge(m, src)
}
func (m *ResponseMsg) XXX_Size() int {
	return xxx_messageInfo_ResponseMsg.Size(m)
}
func (m *ResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMsg proto.InternalMessageInfo

func (m *ResponseMsg) GetNumres() int32 {
	if m != nil {
		return m.Numres
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestMsg)(nil), "main.RequestMsg")
	proto.RegisterType((*ResponseMsg)(nil), "main.ResponseMsg")
}

func init() { proto.RegisterFile("svc1.proto", fileDescriptor_827bd5fb3d7cbf70) }

var fileDescriptor_827bd5fb3d7cbf70 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2e, 0x4b, 0x36,
	0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x52, 0xe0, 0xe2,
	0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xf1, 0x2d, 0x4e, 0x17, 0x12, 0xe2, 0x62, 0xc9, 0x2b,
	0xcd, 0x35, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x95, 0x54, 0xb9, 0xb8, 0x83,
	0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x41, 0x4a, 0xc4, 0xb8, 0xd8, 0xf2, 0x4a, 0x73, 0x8b,
	0x52, 0x8b, 0x25, 0x98, 0xc1, 0x8a, 0xa0, 0x3c, 0x23, 0x67, 0x2e, 0x5e, 0xdf, 0xca, 0x90, 0xd4,
	0xe2, 0x92, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x23, 0x2e, 0x4e, 0xb7, 0xd2, 0xbc,
	0xe4, 0x92, 0xcc, 0xfc, 0x3c, 0x43, 0x21, 0x01, 0x3d, 0x90, 0x6d, 0x7a, 0x08, 0xab, 0xa4, 0x04,
	0x61, 0x22, 0x70, 0xa3, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x4e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x0c, 0xc0, 0x25, 0xd2, 0xa8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyTestServiceClient is the client API for MyTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyTestServiceClient interface {
	Function1(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
}

type myTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyTestServiceClient(cc *grpc.ClientConn) MyTestServiceClient {
	return &myTestServiceClient{cc}
}

func (c *myTestServiceClient) Function1(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/main.MyTestService/Function1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyTestServiceServer is the server API for MyTestService service.
type MyTestServiceServer interface {
	Function1(context.Context, *RequestMsg) (*ResponseMsg, error)
}

func RegisterMyTestServiceServer(s *grpc.Server, srv MyTestServiceServer) {
	s.RegisterService(&_MyTestService_serviceDesc, srv)
}

func _MyTestService_Function1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyTestServiceServer).Function1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MyTestService/Function1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyTestServiceServer).Function1(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.MyTestService",
	HandlerType: (*MyTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Function1",
			Handler:    _MyTestService_Function1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc1.proto",
}
